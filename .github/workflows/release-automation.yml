name: 🚀 Automated Release with Version Consistency

on:
  push:
    tags:
      - 'v*'
  workflow_dispatch:
    inputs:
      version:
        description: 'Version to release (e.g., 2.1.0)'
        required: true
        type: string
      pre_release:
        description: 'Mark as pre-release'
        required: false
        type: boolean
        default: false
      dry_run:
        description: 'Dry run (test without creating release)'
        required: false
        type: boolean
        default: false

env:
  NODE_VERSION: '18'

jobs:
  validate-and-release:
    runs-on: ubuntu-latest
    name: 🔒 Validate & Create Release
    permissions:
      contents: write
      packages: write

    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Need full history for release notes
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: 🔧 Setup Bun
        uses: oven-sh/setup-bun@v1
        with:
          bun-version: latest

      - name: 📦 Install dependencies
        run: bun install

      - name: 🔍 Bulletproof version validation
        run: |
          echo "Running comprehensive version validation..."
          bun run validate-versions

          # Extract and validate version
          VERSION=$(node -p "require('./package.json').version")
          echo "PACKAGE_VERSION=$VERSION" >> $GITHUB_ENV

          # Validate version format
          if [[ ! "$VERSION" =~ ^[0-9]+\.[0-9]+\.[0-9]+$ ]]; then
            echo "❌ Invalid version format: $VERSION"
            echo "Expected format: X.Y.Z (semantic versioning)"
            exit 1
          fi

          echo "✅ Version validation passed: $VERSION"

      - name: 🔄 Sync versions before release
        run: |
          echo "Ensuring all versions are synchronized..."
          bun run version-sync

          # Verify sync worked
          bun run validate-versions

      - name: 🏗️ Build project
        run: |
          echo "Building project with version consistency..."
          bun run build

          # Verify build completed successfully
          if [ ! -d "out" ]; then
            echo "❌ Build failed - no output directory found"
            exit 1
          fi

          echo "✅ Build completed successfully"

      - name: 📦 Create deployment package
        run: |
          VERSION="${{ env.PACKAGE_VERSION }}"
          PACKAGE_NAME="contact-form-v${VERSION}-deployment.zip"
          echo "DEPLOYMENT_PACKAGE=$PACKAGE_NAME" >> $GITHUB_ENV

          echo "Creating deployment package: $PACKAGE_NAME"

          # Create temporary directory for deployment
          mkdir -p temp-deploy

          # Copy essential files
          cp -r out temp-deploy/
          cp -r api temp-deploy/
          cp installer.php temp-deploy/
          cp .htaccess temp-deploy/
          cp -r config temp-deploy/
          cp package.json temp-deploy/

          # Create the deployment package
          cd temp-deploy
          zip -r "../$PACKAGE_NAME" .
          cd ..

          # Cleanup
          rm -rf temp-deploy

          # Verify package was created
          if [ ! -f "$PACKAGE_NAME" ]; then
            echo "❌ Failed to create deployment package"
            exit 1
          fi

          echo "✅ Deployment package created: $PACKAGE_NAME ($(du -h $PACKAGE_NAME | cut -f1))"

      - name: 📋 Generate release notes
        run: |
          VERSION="${{ env.PACKAGE_VERSION }}"
          DATE=$(date +%Y-%m-%d)

          cat > release-notes.md << EOF
          # GlowHost Contact Form v${VERSION}

          Released on ${DATE}

          ## 🚀 What's New

          This release includes the latest version of the GlowHost Contact Form with bulletproof version consistency safeguards.

          ## 📦 Installation

          1. Download the \`${{ env.DEPLOYMENT_PACKAGE }}\` file from this release
          2. Upload and extract to your web server
          3. Run \`installer.php\` to set up the contact form
          4. Follow the installation wizard

          ## 🔒 Version Consistency

          This release has been validated with our bulletproof version consistency system:
          - ✅ All version references verified across all files
          - ✅ Automated deployment package creation
          - ✅ Complete installer validation
          - ✅ Built files checked for consistency

          ## 📋 Technical Details

          - **Version**: ${VERSION}
          - **Build Date**: ${DATE}
          - **Package**: ${{ env.DEPLOYMENT_PACKAGE }}
          - **Build SHA**: \${{ github.sha }}

          ## 🛠️ For Developers

          To maintain version consistency in future releases:
          \`\`\`bash
          bun run validate-versions  # Check consistency
          bun run version-sync      # Fix inconsistencies
          bun run create-release    # Automated release
          \`\`\`

          ---

          🤖 Automated release with bulletproof version consistency
          Co-Authored-By: Same <noreply@same.new>
          EOF

          echo "✅ Release notes generated"

      - name: 🏷️ Create GitHub Release
        if: ${{ !inputs.dry_run }}
        uses: softprops/action-gh-release@v1
        with:
          tag_name: v${{ env.PACKAGE_VERSION }}
          name: Contact Form v${{ env.PACKAGE_VERSION }}
          body_path: release-notes.md
          files: ${{ env.DEPLOYMENT_PACKAGE }}
          prerelease: ${{ inputs.pre_release || false }}
          generate_release_notes: true
          make_latest: ${{ !inputs.pre_release }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: 🔍 Final validation
        if: ${{ !inputs.dry_run }}
        run: |
          echo "Running final validation after release..."

          # Verify the release was created successfully
          VERSION="${{ env.PACKAGE_VERSION }}"
          RELEASE_URL="https://github.com/${{ github.repository }}/releases/tag/v${VERSION}"
          echo "Release URL: $RELEASE_URL"

          # Run one final version check
          bun run validate-versions

          echo "🎉 Release automation completed successfully!"

      - name: 📊 Generate summary
        if: always()
        run: |
          VERSION="${{ env.PACKAGE_VERSION }}"

          cat >> $GITHUB_STEP_SUMMARY << EOF
          # 🚀 Release Automation Summary

          ## 📈 Release Details
          - **Version**: \`$VERSION\`
          - **Package**: \`${{ env.DEPLOYMENT_PACKAGE }}\`
          - **Status**: ${{ job.status }}
          - **Dry Run**: ${{ inputs.dry_run }}
          - **Pre-release**: ${{ inputs.pre_release }}

          ## ✅ Validations Performed
          - 🔍 Version consistency check
          - 🔄 Version synchronization
          - 🏗️ Project build
          - 📦 Deployment package creation
          - 🔒 Final validation

          ## 🔗 Links
          - [Release Page](https://github.com/${{ github.repository }}/releases/tag/v$VERSION)
          - [Deployment Package](${{ github.server_url }}/${{ github.repository }}/releases/download/v$VERSION/${{ env.DEPLOYMENT_PACKAGE }})

          ---

          🤖 Automated with bulletproof version consistency
          EOF

  notify-on-failure:
    runs-on: ubuntu-latest
    needs: validate-and-release
    if: failure()
    steps:
      - name: 🚨 Release Failed
        run: |
          echo "❌ Release automation failed!"
          echo "Check the logs above for details."
          echo "Common issues:"
          echo "  - Version consistency validation failed"
          echo "  - Build errors"
          echo "  - Missing required files"
          echo ""
          echo "To fix:"
          echo "  1. Run: bun run validate-versions"
          echo "  2. Fix any version inconsistencies"
          echo "  3. Run: bun run version-sync"
          echo "  4. Retry the release"
          exit 1
