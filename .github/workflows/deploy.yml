name: üöÄ Build and Deploy Contact Form System

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:
    inputs:
      deploy_to_server:
        description: 'Deploy to server via FTP/SSH'
        required: false
        default: 'false'
        type: choice
        options:
        - 'false'
        - 'true'
      deployment_method:
        description: 'Deployment method'
        required: false
        default: 'ftp'
        type: choice
        options:
        - 'ftp'
        - 'ssh'

env:
  NODE_VERSION: '18'
  
jobs:
  build-and-package:
    name: üì¶ Build & Package for Shared Hosting
    runs-on: ubuntu-latest
    
    steps:
    - name: üì• Checkout Repository
      uses: actions/checkout@v4
      
    - name: üì¶ Setup Bun
      uses: oven-sh/setup-bun@v1
      with:
        bun-version: latest
        
    - name: üìã Cache Dependencies
      uses: actions/cache@v3
      with:
        path: |
          ~/.bun/install/cache
          node_modules
        key: ${{ runner.os }}-bun-${{ hashFiles('**/bun.lockb', '**/package.json') }}
        restore-keys: |
          ${{ runner.os }}-bun-
          
    - name: üîß Install Dependencies
      run: bun install --frozen-lockfile
      
    - name: üîç Verify Next.js Configuration
      run: |
        echo "Checking Next.js configuration for static export..."
        if grep -q "output.*export" next.config.js; then
          echo "‚úÖ Static export configured"
        else
          echo "‚ö†Ô∏è Static export not found in config"
        fi
        
    - name: üèóÔ∏è Build Next.js Application
      run: |
        echo "Building Next.js application for static export..."
        bun run build
        
        # Verify build output
        if [ -d "out" ]; then
          echo "‚úÖ Static export successful"
          echo "üìÅ Build output contents:"
          ls -la out/
        else
          echo "‚ùå Static export failed - no 'out' directory found"
          exit 1
        fi
        
    - name: üìä Build Summary
      run: |
        echo "## üìä Build Summary" >> $GITHUB_STEP_SUMMARY
        echo "- **Build Status:** ‚úÖ Success" >> $GITHUB_STEP_SUMMARY
        echo "- **Output Directory:** \`out/\`" >> $GITHUB_STEP_SUMMARY
        echo "- **Static Files:** $(find out -type f | wc -l) files" >> $GITHUB_STEP_SUMMARY
        echo "- **Total Size:** $(du -sh out | cut -f1)" >> $GITHUB_STEP_SUMMARY
        
        # List key files
        echo "### üìÅ Key Generated Files" >> $GITHUB_STEP_SUMMARY
        echo "\`\`\`" >> $GITHUB_STEP_SUMMARY
        find out -name "*.html" -o -name "*.js" -o -name "*.css" | head -10 | sed 's/^/- /' >> $GITHUB_STEP_SUMMARY
        echo "\`\`\`" >> $GITHUB_STEP_SUMMARY
        
    - name: üìÇ Prepare Deployment Structure
      run: |
        echo "Creating deployment package structure..."
        
        # Create deployment directory
        mkdir -p deployment-package
        
        # Copy built Next.js files
        echo "üìÅ Copying Next.js static files..."
        cp -r out/* deployment-package/
        
        # Copy PHP API files
        echo "üêò Copying PHP API files..."
        cp -r api deployment-package/
        
        # Copy configuration files
        echo "‚öôÔ∏è Copying configuration files..."
        cp -r config deployment-package/
        
        # Copy important root files
        echo "üìÑ Copying root files..."
        for file in README.md .gitignore; do
          if [ -f "$file" ]; then
            cp "$file" deployment-package/
          fi
        done
        
        # Create shared hosting specific files
        echo "üåê Creating shared hosting files..."
        
        # Create .htaccess for pretty URLs and redirects
        cat > deployment-package/.htaccess << 'EOF'
# GlowHost Contact Form System - Shared Hosting Configuration
# Generated by GitHub Actions

# Enable URL rewriting
RewriteEngine On

# Security headers
Header always set X-Content-Type-Options nosniff
Header always set X-Frame-Options DENY
Header always set X-XSS-Protection "1; mode=block"
Header always set Referrer-Policy "strict-origin-when-cross-origin"

# Cache static assets
<FilesMatch "\.(css|js|png|jpg|jpeg|gif|ico|svg|woff|woff2|ttf|eot)$">
  ExpiresActive On
  ExpiresDefault "access plus 1 month"
  Header set Cache-Control "public, immutable, max-age=2592000"
</FilesMatch>

# Cache HTML files for a shorter period
<FilesMatch "\.html$">
  ExpiresActive On
  ExpiresDefault "access plus 1 hour"
  Header set Cache-Control "public, max-age=3600"
</FilesMatch>

# Handle Next.js routing (if using client-side routing)
RewriteCond %{REQUEST_FILENAME} !-f
RewriteCond %{REQUEST_FILENAME} !-d
RewriteCond %{REQUEST_URI} !^/api/
RewriteRule ^(.*)$ /index.html [L]

# API routing for PHP files
RewriteCond %{REQUEST_URI} ^/api/
RewriteCond %{REQUEST_FILENAME} !-f
RewriteRule ^api/(.*)$ /api/$1.php [L]

# Prevent access to sensitive files
<FilesMatch "\.(env|log|bak|backup|old)$">
  Order Allow,Deny
  Deny from all
</FilesMatch>

# Prevent access to config directories (if needed)
RedirectMatch 404 /config/.*

# Custom error pages (optional)
ErrorDocument 404 /404.html
EOF
        
        # Create deployment info file
        cat > deployment-package/deployment-info.json << EOF
{
  "buildTime": "$(date -u +"%Y-%m-%dT%H:%M:%SZ")",
  "gitCommit": "${{ github.sha }}",
  "gitBranch": "${{ github.ref_name }}",
  "buildNumber": "${{ github.run_number }}",
  "repository": "${{ github.repository }}",
  "deploymentType": "static-export",
  "version": "1.0.0"
}
EOF

        echo "‚úÖ Deployment structure prepared"
        
    - name: üîÑ Create Updated Installer
      run: |
        echo "Creating updated installer for built files..."
        
        cat > deployment-package/installer-built.php << 'EOF'
<?php
/**
 * GlowHost Contact Form System - Built Files Installer
 * This installer deploys pre-built static files instead of source code
 * Generated by GitHub Actions
 */

define('INSTALLER_VERSION', '2.0-built');
define('PACKAGE_URL', 'https://github.com/${{ github.repository }}/releases/latest/download/contact-form-deployment.zip');
define('LOG_FILE', __DIR__ . '/installer-built.log');

// Simple deployment for built files
function deployBuiltFiles() {
    $zip_file = __DIR__ . '/contact-form-deployment.zip';
    
    if (!file_exists($zip_file)) {
        throw new Exception('Deployment package not found. Please download it first.');
    }
    
    $zip = new ZipArchive();
    if ($zip->open($zip_file) !== TRUE) {
        throw new Exception('Failed to open deployment package');
    }
    
    // Extract directly to current directory
    $zip->extractTo(__DIR__);
    $zip->close();
    
    // Clean up
    unlink($zip_file);
    
    logMessage('Built files deployed successfully');
    
    return [
        'success' => true,
        'message' => 'Contact form system deployed successfully!',
        'files_deployed' => true
    ];
}

function logMessage($message) {
    $timestamp = date('Y-m-d H:i:s');
    $log_entry = "[{$timestamp}] {$message}\n";
    @file_put_contents(LOG_FILE, $log_entry, FILE_APPEND | LOCK_EX);
}

// Handle deployment request
if (isset($_POST['action']) && $_POST['action'] === 'deploy') {
    header('Content-Type: application/json');
    try {
        echo json_encode(deployBuiltFiles());
    } catch (Exception $e) {
        echo json_encode(['success' => false, 'error' => $e->getMessage()]);
    }
    exit;
}
?>
<!DOCTYPE html>
<html>
<head>
    <title>Deploy Contact Form System</title>
    <style>
        body { font-family: Arial, sans-serif; max-width: 600px; margin: 50px auto; padding: 20px; }
        .deploy-btn { background: #007cba; color: white; padding: 15px 30px; border: none; border-radius: 5px; cursor: pointer; font-size: 16px; }
        .status { margin: 20px 0; padding: 15px; border-radius: 5px; }
        .success { background: #d4edda; color: #155724; border: 1px solid #c3e6cb; }
        .error { background: #f8d7da; color: #721c24; border: 1px solid #f5c6cb; }
    </style>
</head>
<body>
    <h1>üöÄ Deploy Contact Form System</h1>
    <p>This installer deploys pre-built files optimized for shared hosting.</p>
    
    <button class="deploy-btn" onclick="deploySystem()">Deploy System</button>
    
    <div id="status"></div>
    
    <script>
    async function deploySystem() {
        const statusDiv = document.getElementById('status');
        statusDiv.innerHTML = '<div class="status">‚è≥ Deploying system...</div>';
        
        try {
            const response = await fetch('', {
                method: 'POST',
                headers: { 'Content-Type': 'application/x-www-form-urlencoded' },
                body: 'action=deploy'
            });
            
            const result = await response.json();
            
            if (result.success) {
                statusDiv.innerHTML = '<div class="status success">‚úÖ ' + result.message + '</div>';
            } else {
                statusDiv.innerHTML = '<div class="status error">‚ùå ' + result.error + '</div>';
            }
        } catch (error) {
            statusDiv.innerHTML = '<div class="status error">‚ùå Deployment failed: ' + error.message + '</div>';
        }
    }
    </script>
</body>
</html>
EOF

        echo "‚úÖ Updated installer created"
        
    - name: üìã Generate Deployment Instructions
      run: |
        cat > deployment-package/DEPLOYMENT-INSTRUCTIONS.md << 'EOF'
# üöÄ GlowHost Contact Form System - Deployment Instructions

## üì¶ Package Contents

This deployment package contains pre-built, optimized files ready for shared hosting:

### üìÅ Directory Structure
```
contact-form-deployment/
‚îú‚îÄ‚îÄ index.html              # Main application (built from Next.js)
‚îú‚îÄ‚îÄ _next/                  # Next.js static assets
‚îú‚îÄ‚îÄ api/                    # PHP API endpoints
‚îÇ   ‚îî‚îÄ‚îÄ submit-form.php    # Form submission handler
‚îú‚îÄ‚îÄ config/                 # Configuration files
‚îú‚îÄ‚îÄ .htaccess              # Web server configuration
‚îú‚îÄ‚îÄ installer-built.php    # Simplified installer for built files
‚îî‚îÄ‚îÄ DEPLOYMENT-INSTRUCTIONS.md
```

## üåê Deployment to Shared Hosting (cPanel)

### Method 1: File Manager Upload
1. **Login to cPanel** and open File Manager
2. **Navigate** to your domain's public_html directory
3. **Upload** the entire contents of this package
4. **Extract** if uploaded as ZIP
5. **Set permissions** (755 for directories, 644 for files)

### Method 2: FTP Upload
1. **Connect** to your hosting via FTP client
2. **Navigate** to public_html or www directory
3. **Upload** all files maintaining directory structure
4. **Verify** file permissions

### Method 3: Using Installer
1. **Upload** only `installer-built.php` and the deployment ZIP
2. **Run** installer-built.php in your browser
3. **Follow** the deployment process

## ‚öôÔ∏è Configuration

### üìß Email Configuration
Edit `api/submit-form.php` to configure:
- SMTP settings
- Recipient email addresses
- Email templates

### üîí Security Settings
Edit `config/app.config.ts` (if needed) for:
- CORS settings
- API endpoints
- Security headers

## ‚úÖ Post-Deployment Verification

1. **Visit your website** - should display the contact form
2. **Test form submission** - verify emails are sent
3. **Check error logs** in cPanel if issues occur
4. **Verify .htaccess** is working for clean URLs

## üîß Troubleshooting

### Common Issues:
- **500 Error**: Check .htaccess compatibility
- **PHP Errors**: Verify PHP version (7.4+ recommended)
- **Email Issues**: Configure SMTP in submit-form.php
- **Permission Issues**: Set 755 for directories, 644 for files

### Support:
- Check deployment-info.json for build details
- Review installer logs
- Contact GlowHost support if needed

## üìä Build Information
- **Built**: $(date -u +"%Y-%m-%d %H:%M:%S UTC")
- **Commit**: ${{ github.sha }}
- **Branch**: ${{ github.ref_name }}
- **Build #**: ${{ github.run_number }}
EOF

        echo "‚úÖ Deployment instructions created"
        
    - name: üì¶ Create Deployment Packages
      run: |
        echo "Creating deployment packages..."
        
        # Create main deployment package
        cd deployment-package
        zip -r ../contact-form-deployment.zip . -x "*.git*" "*.DS_Store*" "node_modules/*"
        cd ..
        
        # Create separate API-only package
        mkdir api-only-package
        cp -r api config deployment-package/.htaccess deployment-package/DEPLOYMENT-INSTRUCTIONS.md api-only-package/
        zip -r api-only-deployment.zip api-only-package/
        
        # Create installer package
        mkdir installer-package
        cp deployment-package/installer-built.php installer-package/
        cp deployment-package/DEPLOYMENT-INSTRUCTIONS.md installer-package/
        echo "Download contact-form-deployment.zip and place it in the same directory as this installer." > installer-package/README.txt
        zip -r installer-only.zip installer-package/
        
        echo "üì¶ Packages created:"
        ls -lh *.zip
        
    - name: üìä Package Summary
      run: |
        echo "## üì¶ Deployment Packages Created" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "| Package | Size | Contents |" >> $GITHUB_STEP_SUMMARY
        echo "|---------|------|----------|" >> $GITHUB_STEP_SUMMARY
        echo "| üéØ **contact-form-deployment.zip** | $(du -sh contact-form-deployment.zip | cut -f1) | Complete system (static files + PHP API) |" >> $GITHUB_STEP_SUMMARY
        echo "| üêò **api-only-deployment.zip** | $(du -sh api-only-deployment.zip | cut -f1) | PHP API and configuration only |" >> $GITHUB_STEP_SUMMARY
        echo "| üõ†Ô∏è **installer-only.zip** | $(du -sh installer-only.zip | cut -f1) | Simplified installer for built files |" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "### üéØ Recommended: Use **contact-form-deployment.zip** for complete deployment" >> $GITHUB_STEP_SUMMARY
        
    - name: üì§ Upload Build Artifacts
      uses: actions/upload-artifact@v3
      with:
        name: contact-form-deployment-${{ github.run_number }}
        path: |
          contact-form-deployment.zip
          api-only-deployment.zip
          installer-only.zip
          deployment-package/DEPLOYMENT-INSTRUCTIONS.md
        retention-days: 30
        
    - name: üéØ Create Release (on main branch)
      if: github.ref == 'refs/heads/main' && github.event_name == 'push'
      uses: softprops/action-gh-release@v1
      with:
        tag_name: build-${{ github.run_number }}
        name: "Contact Form System v${{ github.run_number }}"
        body: |
          ## üöÄ Contact Form System - Ready for Shared Hosting
          
          **Build Information:**
          - Commit: ${{ github.sha }}
          - Build Date: ${{ steps.build.outputs.date }}
          - Build Number: ${{ github.run_number }}
          
          **üì¶ Deployment Packages:**
          - **contact-form-deployment.zip** - Complete system ready for shared hosting
          - **api-only-deployment.zip** - PHP API and configuration files only
          - **installer-only.zip** - Simplified installer for built files
          
          **üåê Deployment:**
          1. Download `contact-form-deployment.zip`
          2. Extract to your shared hosting public_html directory
          3. Configure email settings in `api/submit-form.php`
          4. Test the contact form
          
          **‚ú® Features:**
          - Pre-built static files (no Node.js required)
          - PHP API for form submission
          - Optimized for shared hosting (cPanel)
          - Clean URLs with .htaccess
          - Security headers included
        files: |
          contact-form-deployment.zip
          api-only-deployment.zip
          installer-only.zip
        draft: false
        prerelease: false
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  # Optional deployment to server
  deploy-to-server:
    name: üåê Deploy to Server
    needs: build-and-package
    runs-on: ubuntu-latest
    if: github.event.inputs.deploy_to_server == 'true' && github.ref == 'refs/heads/main'
    
    steps:
    - name: üì• Download Deployment Package
      uses: actions/download-artifact@v3
      with:
        name: contact-form-deployment-${{ github.run_number }}
        
    - name: üöÄ Deploy via FTP
      if: github.event.inputs.deployment_method == 'ftp'
      uses: SamKirkland/FTP-Deploy-Action@v4.3.4
      with:
        server: ${{ secrets.FTP_SERVER }}
        username: ${{ secrets.FTP_USERNAME }}
        password: ${{ secrets.FTP_PASSWORD }}
        protocol: ftps
        local-dir: ./deployment-package/
        server-dir: /public_html/
        exclude: |
          **/.git*
          **/.git*/**
          **/node_modules/**
          .env*
          
    - name: üöÄ Deploy via SSH
      if: github.event.inputs.deployment_method == 'ssh'
      uses: appleboy/ssh-action@v1.0.0
      with:
        host: ${{ secrets.SSH_HOST }}
        username: ${{ secrets.SSH_USERNAME }}
        key: ${{ secrets.SSH_PRIVATE_KEY }}
        port: ${{ secrets.SSH_PORT || 22 }}
        script: |
          # Create backup of existing files
          if [ -d "/home/${{ secrets.SSH_USERNAME }}/public_html/backup-$(date +%Y%m%d)" ]; then
            rm -rf /home/${{ secrets.SSH_USERNAME }}/public_html/backup-$(date +%Y%m%d)
          fi
          mkdir -p /home/${{ secrets.SSH_USERNAME }}/public_html/backup-$(date +%Y%m%d)
          cp -r /home/${{ secrets.SSH_USERNAME }}/public_html/* /home/${{ secrets.SSH_USERNAME }}/public_html/backup-$(date +%Y%m%d)/ 2>/dev/null || true
          
          # Download and extract deployment package
          cd /home/${{ secrets.SSH_USERNAME }}/public_html
          wget -O contact-form-deployment.zip "https://github.com/${{ github.repository }}/releases/download/build-${{ github.run_number }}/contact-form-deployment.zip"
          unzip -o contact-form-deployment.zip
          rm contact-form-deployment.zip
          
          # Set proper permissions
          find . -type d -exec chmod 755 {} \;
          find . -type f -exec chmod 644 {} \;
          chmod 755 api/*.php
          
          echo "Deployment completed successfully!"
          
    - name: üìß Deployment Notification
      if: always()
      run: |
        if [ "${{ job.status }}" == "success" ]; then
          echo "‚úÖ Deployment to ${{ github.event.inputs.deployment_method }} completed successfully!"
        else
          echo "‚ùå Deployment failed. Check the logs for details."
        fi
        
        echo "## üåê Server Deployment Status" >> $GITHUB_STEP_SUMMARY
        echo "- **Method:** ${{ github.event.inputs.deployment_method }}" >> $GITHUB_STEP_SUMMARY
        echo "- **Status:** ${{ job.status == 'success' && '‚úÖ Success' || '‚ùå Failed' }}" >> $GITHUB_STEP_SUMMARY
        echo "- **Target:** ${{ secrets.FTP_SERVER || secrets.SSH_HOST }}" >> $GITHUB_STEP_SUMMARY